import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.DyEXnO_p.js";const E=JSON.parse('{"title":"Nginx与Docker","description":"","frontmatter":{},"headers":[],"relativePath":"column/Develop/Backend/FastAPI/Nginx在Docker的使用小记.md","filePath":"column/Develop/Backend/FastAPI/Nginx在Docker的使用小记.md"}'),p={name:"column/Develop/Backend/FastAPI/Nginx在Docker的使用小记.md"},e=n(`<h1 id="nginx与docker" tabindex="-1">Nginx与Docker <a class="header-anchor" href="#nginx与docker" aria-label="Permalink to &quot;Nginx与Docker&quot;">​</a></h1><blockquote><p>参考文章: <a href="https://juejin.cn/post/7250710949140480057" target="_blank" rel="noreferrer">https://juejin.cn/post/7250710949140480057</a></p></blockquote><h2 id="前置资源" tabindex="-1">前置资源 <a class="header-anchor" href="#前置资源" aria-label="Permalink to &quot;前置资源&quot;">​</a></h2><p>在docker中pull下来nginx镜像<img src="https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405061613803.png" alt="image-20240506161343274"></p><p>然后配置对应的端口，这里的意思是宿主极的1234端口映射到Nginx容器中的80端口。现在可以<code>Run</code>起来了。<img src="https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405061615008.png" alt="image-20240506161508953"></p><p>访问<a href="http://localhost:1234" target="_blank" rel="noreferrer">http://localhost:1234</a>，可以看见Nginx服务跑起来了。</p><p><img src="https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405061617118.png" alt="image-20240506161729042"></p><h2 id="配置nginx" tabindex="-1">配置Nginx <a class="header-anchor" href="#配置nginx" aria-label="Permalink to &quot;配置Nginx&quot;">​</a></h2><h3 id="反代" tabindex="-1">反代 <a class="header-anchor" href="#反代" aria-label="Permalink to &quot;反代&quot;">​</a></h3><p>用Nginx怎能不用其反代功能，这是啥意思？</p><p>就是配置多个端口，可以同时访问这个网站。这里引入下面的nginx配置进行说明：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_web </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 192.168.1.6:3000;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 192.168.1.6:3001;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样访问3000端口和3001端口的效果都是一样的，所以这就是<code>将流量分配到多个后端服务器，实现负载均衡和提高性能。</code>下面是Nginx反向代理的优点：</p><blockquote><ol><li><strong>负载均衡</strong>：将流量分配到多个后端服务器，实现负载均衡和提高性能。</li><li><strong>安全</strong>：隐藏后端服务器的真实 IP，减少它们直接暴露在互联网上的风险。</li><li><strong>缓存</strong>：在反向代理服务器上缓存内容，以减少后端服务器的负载并提高客户端的响应速度。</li><li><strong>SSL终止</strong>：反代服务器可以处理 SSL 加密，从而简化后端服务器的配置。</li></ol></blockquote><p>那去哪里寻找nginx的配置文件呢？</p><p>在 <code>/etc/nginx/nginx.conf</code>是默认的主配置文件。</p><p>然后在<code>/etc/nginx/conf.d/**.conf</code>这些配置文件是子配置文件。（如<code>/etc/nginx/conf.d/default.conf</code>）</p><p>具体看下子配置文件，这里看<code>default.conf</code>文件。</p><p><img src="https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405071402853.png" alt="image-20240507140242742"></p><p>这里的<code>location</code>就是对应的路由配置。这什么意思呢？</p><p>比如这里的配置：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #access_log  /var/log/nginx/host.access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  /usr/share/nginx/html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p><code>/</code>表示配置了这里的所有路由，在<code>root</code>权限指定的目录查找。具体到实际意思就是对<code>http://localhost/aaa.hml</code>而言是从<code>/usr/share/nginx/html/aaa.html</code>拿到的。</p><p>现在有一个需求：当我访问3000和3001端口的时候如何定到同一个web呢？</p><p>其实这个很简单啊，看一眼下面的配置就会啦。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nest-server </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 192.168.64.1:3000;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 192.168.64.1:3001; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的ip地址与下面的host.docker.internal相同作用，均是定位到宿主机在本地网络中分配到的ip地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # server host.docker.internal:3001;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [::]:80;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #access_log  /var/log/nginx/host.access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  /usr/share/nginx/html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index.html index.htm;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /api </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://nest-server;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的nest-server与上面的upstream相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  。。。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的作用是访问<a href="http://localhost:1234/api%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E7%9A%84%E6%97%B6%E5%80%99%E4%BC%9A%E5%B0%86%E6%B5%81%E9%87%8F%E5%9D%87%E5%88%86%E7%BB%99%603000%60%E5%92%8C%603001%60%E7%AB%AF%E5%8F%A3%E3%80%82" target="_blank" rel="noreferrer">http://localhost:1234/api这个地址的时候会将流量均分给\`3000\`和\`3001\`端口。</a></p><p><img src="https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405071532879.png" alt="image-20240507153228768"></p><p>好了，由一开始的nginx容器的配置可以知道，端口是由宿主机1234端口映射到容器的80端口，接下来启动了两个不同端口的web服务后访问<a href="http://localhost:1234/api%E5%8D%B3%E5%8F%AF%E6%A0%B9%E6%8D%AEnginx%E9%85%8D%E7%BD%AE%E7%9A%84%E7%AD%96%E7%95%A5%E5%AE%9A%E4%BD%8D%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E3%80%82!%5Bimage-20240507164305102%5D(https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405071643195.png)" target="_blank" rel="noreferrer">http://localhost:1234/api即可根据nginx配置的策略定位到不同的后端服务器上。![image-20240507164305102](https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405071643195.png)</a></p><p>简言之，我们可以在下面的代码中配置不同的后端服务器，用以提供服务（当然每台服务器都启动了对应的Web应用并开启了对应的端口）</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nest-server </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 192.168.64.1:3000;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 192.168.64.1:3001;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # server host.docker.internal:3001;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这篇文章介绍的是一个单机部署Nginx配置多后端服务器的例子。<img src="https://product-1256871806.cos.ap-shanghai.myqcloud.com/imgs202405071648121.png" alt="image-20240507164831054"></p>`,32),l=[e];function t(h,k,r,o,c,g){return a(),i("div",null,l)}const y=s(p,[["render",t]]);export{E as __pageData,y as default};
